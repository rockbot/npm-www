{
  "name": "wredis",
  "version": "0.0.2",
  "description": "a read-write redis wrapper",
  "main": "index.js",
  "scripts": {
    "test": "mocha -R spec tests.js"
  },
  "keywords": [
    "read",
    "write",
    "redis",
    "wrapper"
  ],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "redis": "^0.10.1"
  },
  "devDependencies": {
    "must": "^0.11.0",
    "mocha": "^1.17.1",
    "sinon": "^1.8.2"
  },
  "contributors": [
    {
      "name": "C J Silverio",
      "email": "ceej@npmjs.com"
    },
    {
      "name": "Raquel Velez",
      "email": "raquel@npmjs.com"
    }
  ],
  "readme": "# wredis\n\nA simple wrapper for two redis clients. It directs write commands to one client & read commands to the other. It does *not* support any meta commands that act upon the redis server; it only wraps data read & write operations. See [commands.js](https://github.com/npm/wredis/blob/master/commands.js) for the full list. Other functions supported: `auth()`, `select()`, `quit()`, and `end()`.\n\n## Usage\n\n```javascript\nvar Wredis = require('wredis');\n\nvar wr = new Wredis({\n    writer: { host: 'localhost', port: 6379 },\n    reader: { host: 'localhost', port: 6389 },\n});\n\n// this is called on the writer client\nwr.set('foo', 'bar', function(err, r1) {\n    // this is called on the reader client\n    wr.keys('*', function(err, r2) {\n        // reader\n        wr.get('foo', function(err, r3) {\n            // writer\n            wr.del('foo', function(err, r4) {\n                process.exit(0);\n            });\n        })\n    });\n});\n```\n\nThe writer Redis client is available at `wr.writer` and the reader Redis client at `wr.reader`. These objects are ordinary [node_redis](https://github.com/mranney/node_redis) clients.\n\n## License\n\nISC\n",
  "readmeFilename": "README.md",
  "_id": "wredis@0.0.2",
  "dist": {
    "shasum": "44377407256f05ee6003382c420d7ee36a52bf7e"
  },
  "_from": "wredis@0.0.2",
  "_resolved": "https://registry.npmjs.org/wredis/-/wredis-0.0.2.tgz"
}
